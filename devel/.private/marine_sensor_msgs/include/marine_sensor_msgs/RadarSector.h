// Generated by gencpp from file marine_sensor_msgs/RadarSector.msg
// DO NOT EDIT!


#ifndef MARINE_SENSOR_MSGS_MESSAGE_RADARSECTOR_H
#define MARINE_SENSOR_MSGS_MESSAGE_RADARSECTOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <marine_sensor_msgs/RadarEcho.h>

namespace marine_sensor_msgs
{
template <class ContainerAllocator>
struct RadarSector_
{
  typedef RadarSector_<ContainerAllocator> Type;

  RadarSector_()
    : header()
    , angle_start(0.0)
    , angle_increment(0.0)
    , time_increment()
    , scan_time()
    , range_min(0.0)
    , range_max(0.0)
    , intensities()  {
    }
  RadarSector_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , angle_start(0.0)
    , angle_increment(0.0)
    , time_increment()
    , scan_time()
    , range_min(0.0)
    , range_max(0.0)
    , intensities(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _angle_start_type;
  _angle_start_type angle_start;

   typedef float _angle_increment_type;
  _angle_increment_type angle_increment;

   typedef ros::Duration _time_increment_type;
  _time_increment_type time_increment;

   typedef ros::Duration _scan_time_type;
  _scan_time_type scan_time;

   typedef float _range_min_type;
  _range_min_type range_min;

   typedef float _range_max_type;
  _range_max_type range_max;

   typedef std::vector< ::marine_sensor_msgs::RadarEcho_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::marine_sensor_msgs::RadarEcho_<ContainerAllocator> >> _intensities_type;
  _intensities_type intensities;





  typedef boost::shared_ptr< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> const> ConstPtr;

}; // struct RadarSector_

typedef ::marine_sensor_msgs::RadarSector_<std::allocator<void> > RadarSector;

typedef boost::shared_ptr< ::marine_sensor_msgs::RadarSector > RadarSectorPtr;
typedef boost::shared_ptr< ::marine_sensor_msgs::RadarSector const> RadarSectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marine_sensor_msgs::RadarSector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marine_sensor_msgs::RadarSector_<ContainerAllocator1> & lhs, const ::marine_sensor_msgs::RadarSector_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.angle_start == rhs.angle_start &&
    lhs.angle_increment == rhs.angle_increment &&
    lhs.time_increment == rhs.time_increment &&
    lhs.scan_time == rhs.scan_time &&
    lhs.range_min == rhs.range_min &&
    lhs.range_max == rhs.range_max &&
    lhs.intensities == rhs.intensities;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marine_sensor_msgs::RadarSector_<ContainerAllocator1> & lhs, const ::marine_sensor_msgs::RadarSector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marine_sensor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df60b1c17b5e9990cfefd1e37ab4e5a8";
  }

  static const char* value(const ::marine_sensor_msgs::RadarSector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf60b1c17b5e9990ULL;
  static const uint64_t static_value2 = 0xcfefd1e37ab4e5a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marine_sensor_msgs/RadarSector";
  }

  static const char* value(const ::marine_sensor_msgs::RadarSector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A collection of marine radar rays, typically covering a contiguous\n"
"# arc of a full circle.\n"
"\n"
"# timestamp in the header is the acquisition time of\n"
"# the first ray in the sector.\n"
"#\n"
"# In frame frame_id, angles are measured around\n"
"# the positive Z axis (counterclockwise, if Z is up)\n"
"# with zero angle being forward along the X axis\n"
"Header header\n"
"\n"
"# start angle of this sector [rad]\n"
"float32 angle_start\n"
"\n"
"# angular distance between rays [rad]\n"
"float32 angle_increment\n"
"\n"
"# time between rays [seconds] - if your scanner\n"
"# is moving, this can be used in interpolating\n"
"# position of 3d points\n"
"duration time_increment\n"
"\n"
"# time between two consecutive complete scans\n"
"# or revolutions [seconds]\n"
"# Warning: On hardware that doesn't provide a timestamp,\n"
"# time-related fields may be estimated and vary\n"
"# from sector to sector as estimates are updated\n"
"duration scan_time\n"
"\n"
"# range of the first sample in each ray [m]\n"
"float32 range_min\n"
"\n"
"# range of the last sample in each ray [m]\n"
"float32 range_max\n"
"\n"
"# intensity data [device-specific units].\n"
"RadarEcho[] intensities\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: marine_sensor_msgs/RadarEcho\n"
"# This message is a submessage of RadarSector and is not intended\n"
"# to be used separately. It represents intensities from a\n"
"# single ray.\n"
"\n"
"# Series of intensities from closest to farthest\n"
"# along a given angle increment. [device-specific units]\n"
"float32[] echoes\n"
;
  }

  static const char* value(const ::marine_sensor_msgs::RadarSector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.angle_start);
      stream.next(m.angle_increment);
      stream.next(m.time_increment);
      stream.next(m.scan_time);
      stream.next(m.range_min);
      stream.next(m.range_max);
      stream.next(m.intensities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarSector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marine_sensor_msgs::RadarSector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marine_sensor_msgs::RadarSector_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "angle_start: ";
    Printer<float>::stream(s, indent + "  ", v.angle_start);
    s << indent << "angle_increment: ";
    Printer<float>::stream(s, indent + "  ", v.angle_increment);
    s << indent << "time_increment: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_increment);
    s << indent << "scan_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.scan_time);
    s << indent << "range_min: ";
    Printer<float>::stream(s, indent + "  ", v.range_min);
    s << indent << "range_max: ";
    Printer<float>::stream(s, indent + "  ", v.range_max);
    s << indent << "intensities[]" << std::endl;
    for (size_t i = 0; i < v.intensities.size(); ++i)
    {
      s << indent << "  intensities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::marine_sensor_msgs::RadarEcho_<ContainerAllocator> >::stream(s, indent + "    ", v.intensities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARINE_SENSOR_MSGS_MESSAGE_RADARSECTOR_H
