<launch>
  <!-- Vehicle namespace -->
  <arg name="uuv_name" default="eca_a9"/>
  <!-- Name of the vehicle model -->
  <arg name="model_name" default="$(arg uuv_name)"/>
  <!-- Thruster saturation -->
   <arg name="saturation" default="1200"/> 
  <!-- Flag to start the trajectory visual markers publisher -->
  <arg name="gui_on" default="true"/>
  <!-- Flag set as true to use load controller the parameters from the file  -->
  <arg name="use_params_file" default="false"/>
<!--   <arg name="use_auv_control_allocator" default="true"/>
  <arg name="axis_yaw" default="0"/>
  <arg name="axis_x" default="4"/>
  <arg name="axis_y" default="3"/>
  <arg name="axis_z" default="1"/> -->

  <!--
    Set this flag to true to compute both reference and error vectors wrt
    world_ned frame
  -->
  <arg name="use_ned_frame" default="false"/>

  <!-- If the file is not used, read the parameters from the user input -->
  <!-- Caution: no spaces between the parameter values -->
  <arg name="lambda" default="10,10,10,10,10,10"/>
  <arg name="rho_constant" default="10000,10000,10000,10000,10000,10000"/>
  <arg name="k" default="500,500,500,500,500,500"/>
  <arg name="c" default="50,50,50,1,1,1"/>
  <arg name="adapt_slope" default="100,10,10"/>
  <arg name="rho_0" default="3000,3000,8000,1500,1500,8000"/>
  <arg name="drift_prevent" default="0.03"/>

  <arg name="look_ahead_delay" default="0.0"/>
  <arg name="min_thrust" default="0"/>
  <arg name="max_thrust" default="120"/>
  <!-- <arg name="n_fins" default="4"/>
  <arg name="map_roll" value="1,1,1,1"/>
  <arg name="map_pitch" value="1,1,-1,-1"/>
  <arg name="map_yaw" value="-1,1,1,-1"/>
  <arg name="max_fin_angle" default="1.396263402"/>
  <arg name="idle_radius" default="30"/> 
 -->

  <!-- Model parameters -->
  <arg name="model_params_file" default="$(find uuv_trajectory_control)/config/models/$(arg model_name)/model_params.yaml"/>

  <include file="$(find eca_a9_control)/launch/start_control_allocator.launch"/>

  <!-- Thruster configuration -->
  <!-- <arg name="thruster_topic" default="thrusters/0/input"/>
  <arg name="thruster_topic_prefix" default="thrusters" />
  <arg name="thruster_topic_suffix" default="input" />
  <arg name="thruster_frame_base" default="thruster_" />
  <arg name="thruster_conversion_fcn" default="proportional" /> -->
  <!-- For proportional thruster model: gain * rotor_ang_vel * |rotor_ang_vel| -->
  <!-- <arg name="thruster_gain" default="0.000049"/>
  <arg name="fin_topic_prefix" default="fins"/>
  <arg name="fin_topic_suffix" default="input"/>  --> 

  <!-- This node just reads the trajectory and waypoint topics and publishes
       visualization markers for RViz -->
 <group if="$(arg gui_on)">
      <group ns="$(arg uuv_name)">
          <node pkg="uuv_control_utils"
              type="trajectory_marker_publisher.py"
              name="trajectory_marker_publisher"
              output="screen"/>
              <remap from="trajectory" to="dp_controller/trajectory"/>
              <remap from="waypoints" to="dp_controller/waypoints"/>
              <remap from="reference" to="dp_controller/reference"/>
      </group>
    </group>


  <group if="$(arg use_params_file)">
    <group ns="$(arg uuv_name)">
      <node pkg="uuv_trajectory_control"
            type="rov_mb_sm_controller.py"
            name="rov_mb_smcontroller"
            output="screen"
            if="$(arg use_ned_frame)">
          <!-- Remap necessary topics -->
          <remap from="odom" to="pose_gt"/>
          <remap from="trajectory" to="dp_controller/trajectory"/>
          <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
          <remap from="waypoints" to="dp_controller/waypoints"/>
          <remap from="error" to="dp_controller/error"/>
          <remap from="reference" to="dp_controller/reference"/>
          <remap from="thruster_output" to="thruster_manager/input_stamped"/>
          <remap from="auv_command_output" to="control_allocation/control_input"/>
          <rosparam file="$(arg controller_config_file)" command="load"/>
          <rosparam file="$(arg model_params_file)" command="load"/>
          <rosparam subst_value="true">
            saturation: $(arg saturation)

            inertial_frame_id: world_ned
            
          </rosparam>
      </node>

      <node pkg="uuv_trajectory_control"
            type="rov_mb_sm_controller.py"
            name="rov_mb_smcontroller"
            output="screen"
            unless="$(arg use_ned_frame)">
          <!-- Remap necessary topics -->
          <remap from="odom" to="pose_gt"/>
          <remap from="trajectory" to="dp_controller/trajectory"/>
          <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
          <remap from="waypoints" to="dp_controller/waypoints"/>
          <remap from="error" to="dp_controller/error"/>
          <remap from="reference" to="dp_controller/reference"/>
          <remap from="thruster_output" to="thruster_manager/input_stamped"/>
          <remap from="auv_command_output" to="control_allocation/control_input"/>
          <rosparam file="$(arg controller_config_file)" command="load"/>
          <rosparam file="$(arg model_params_file)" command="load"/>
          <rosparam subst_value="true">
            saturation: $(arg saturation)
            inertial_frame_id: world            
          </rosparam>
      </node>
    </group>
  </group>

  <group unless="$(arg use_params_file)">
    <group ns="$(arg uuv_name)">
      <node pkg="uuv_trajectory_control"
            type="rov_mb_sm_controller.py"
            name="rov_mb_smcontroller"
            output="screen"
            if="$(arg use_ned_frame)">
          <!-- Remap necessary topics -->
          <remap from="odom" to="pose_gt_ned"/>
          <remap from="trajectory" to="dp_controller/trajectory"/>
          <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
          <remap from="waypoints" to="dp_controller/waypoints"/>
          <remap from="error" to="dp_controller/error"/>
          <remap from="reference" to="dp_controller/reference"/>
          <remap from="thruster_output" to="thruster_manager/input_stamped"/>
          <remap from="auv_command_output" to="control_allocation/control_input"/>
          <rosparam file="$(arg model_params_file)" command="load"/>

          <rosparam subst_value="true">
            saturation: $(arg saturation)
            lambda: [$(arg lambda)]
            thrusters_only: false
            rho_constant: [$(arg rho_constant)]
            k: [$(arg k)]
            c: [$(arg c)]
            adapt_slope: [$(arg adapt_slope)]
            rho_0: [$(arg rho_0)]
            drift_prevent: $(arg drift_prevent)
            inertial_frame_id: world_ned
            max_forward_speed: 2.0
            min_thrust: $(arg min_thrust)
            max_thrust: $(arg max_thrust)
            is_underactuated: true
            look_ahead_delay: $(arg look_ahead_delay)
            dubins: 
              radius: 25
              max_pitch: 0.09
          </rosparam>
      </node>

      <node pkg="uuv_trajectory_control"
            type="rov_mb_sm_controller.py"
            name="rov_mb_smcontroller"
            output="screen"
            unless="$(arg use_ned_frame)">
          <!-- Remap necessary topics -->
          <remap from="odom" to="pose_gt"/>
          <remap from="trajectory" to="dp_controller/trajectory"/>
          <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
          <remap from="waypoints" to="dp_controller/waypoints"/>
          <remap from="error" to="dp_controller/error"/>
          <remap from="reference" to="dp_controller/reference"/>
          <remap from="thruster_output" to="thruster_manager/input_stamped"/>
          <remap from="auv_command_output" to="control_allocation/control_input"/>
          <rosparam file="$(arg model_params_file)" command="load"/>

          <rosparam subst_value="true">
            saturation: $(arg saturation)
            lambda: [$(arg lambda)]
            rho_constant: [$(arg rho_constant)]
            thrusters_only: false
            k: [$(arg k)]
            c: [$(arg c)]
            adapt_slope: [$(arg adapt_slope)]
            rho_0: [$(arg rho_0)]
            drift_prevent: $(arg drift_prevent)
            inertial_frame_id: world
            max_forward_speed: 2.0
            min_thrust: $(arg min_thrust)
            max_thrust: $(arg max_thrust)
            is_underactuated: true
            look_ahead_delay: $(arg look_ahead_delay)
            dubins: 
              radius: 25
              max_pitch: 0.09
          </rosparam>
      </node>
    </group>
  </group>

  <group if="$(arg gui_on)">
        <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find eca_a9_control)/rviz/eca_a9_control.rviz"/>
  </group>

</launch>
